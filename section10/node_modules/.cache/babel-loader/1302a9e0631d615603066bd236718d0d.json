{"ast":null,"code":"var _jsxFileName = \"/Users/seonmin/Documents/react with max/\\u1109\\u1166\\u11A8\\u1109\\u1167\\u11AB10/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") return {\n    value: \"\",\n    isValid: false\n  };\n}; // 리듀서 함수는 컴포넌트 함수 밖에 만듬. 왜냐면 리듀서 함수 내부에서는 컴포넌트 함수 내부에서 만들어진 어떤 데이터로 필요하지 않기 때문이다.\n// 리듀서 함수 내부에서 요청되고 사용되는 모든 데이터는 리액트가 이 함수를 실행할 때 자동으로 이 함수로 전달된다.\n\n\nconst Login = props => {\n  _s();\n\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: false\n  });\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"checking form validity!!\");\n      setFormIsValid(enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6);\n    }, 500);\n    return () => {\n      console.log(\"clean up!!!!\");\n      clearTimeout(identifier);\n    }; // 이건 clean up 함수이다.\n  }, [enteredEmail, enteredPassword]); //여기서 setFormIsValid()를 재평가하고 유효성 검사 state 설정 함수를 다시 실행해야 한다. 이메일 및 비밀번호 변경 핸들러의 모든 키 입력에 대해서!\n  //setTimeout 함수를 사용해서 500밀리초 후에만 이 작업 (유효성 검사)을 수행한다.\n\n  const emailChangeHandler = event => {\n    //setEnteredEmail(event.target.value);\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    });\n    setFormIsValid(event.target.value.includes(\"@\") && enteredPassword.trim().length > 6);\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid( // enteredEmail.includes(\"@\") && event.target.value.trim().length > 6\n    //emailState.value.includes(\"@\") && event.target.value.trim().length > 6\n    // useReducer를 썼기 때문에 입력된 값을 저장할 것이기 때문에 emailState.value라고 씀\n    emailState.isValid && event.target.value.trim().length > 6 // isValid 필드가 있어서 재검증 하는 대신 emailState.isValid가 true인지 확인 할 수 있다.\n    );\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${//emailIsValid === false ? classes.invalid : \"\"\n        emailState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\" // value={enteredEmail}\n          ,\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"p3Zt5+1IAF2dD1uAMkm9EVODb28=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","isValid","Login","props","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","identifier","setTimeout","console","log","enteredEmail","includes","trim","length","clearTimeout","emailChangeHandler","event","val","target","passwordChangeHandler","validateEmailHandler","setEmailIsValid","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/Users/seonmin/Documents/react with max/섹션10/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") return { value: \"\", isValid: false };\n};\n// 리듀서 함수는 컴포넌트 함수 밖에 만듬. 왜냐면 리듀서 함수 내부에서는 컴포넌트 함수 내부에서 만들어진 어떤 데이터로 필요하지 않기 때문이다.\n// 리듀서 함수 내부에서 요청되고 사용되는 모든 데이터는 리액트가 이 함수를 실행할 때 자동으로 이 함수로 전달된다.\n\nconst Login = (props) => {\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: false,\n  });\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"checking form validity!!\");\n      setFormIsValid(\n        enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6\n      );\n    }, 500);\n\n    return () => {\n      console.log(\"clean up!!!!\");\n      clearTimeout(identifier);\n    }; // 이건 clean up 함수이다.\n  }, [enteredEmail, enteredPassword]);\n  //여기서 setFormIsValid()를 재평가하고 유효성 검사 state 설정 함수를 다시 실행해야 한다. 이메일 및 비밀번호 변경 핸들러의 모든 키 입력에 대해서!\n  //setTimeout 함수를 사용해서 500밀리초 후에만 이 작업 (유효성 검사)을 수행한다.\n\n  const emailChangeHandler = (event) => {\n    //setEnteredEmail(event.target.value);\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value });\n\n    setFormIsValid(\n      event.target.value.includes(\"@\") && enteredPassword.trim().length > 6\n    );\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n\n    setFormIsValid(\n      // enteredEmail.includes(\"@\") && event.target.value.trim().length > 6\n      //emailState.value.includes(\"@\") && event.target.value.trim().length > 6\n      // useReducer를 썼기 때문에 입력된 값을 저장할 것이기 때문에 emailState.value라고 씀\n      emailState.isValid && event.target.value.trim().length > 6\n      // isValid 필드가 있어서 재검증 하는 대신 emailState.isValid가 true인지 확인 할 수 있다.\n    );\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            //emailIsValid === false ? classes.invalid : \"\"\n            emailState.isValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor='email'>E-Mail</label>\n          <input\n            type='email'\n            id='email'\n            // value={enteredEmail}\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor='password'>Password</label>\n          <input\n            type='password'\n            id='password'\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type='submit' className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}