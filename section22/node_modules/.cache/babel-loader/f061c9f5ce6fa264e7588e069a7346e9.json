{"ast":null,"code":"var _jsxFileName = \"/Users/seonmin/Documents/react with max/section22/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  //남은 시간을 밀리초로 리턴하기\n  const currentTime = new Date().getTime(); // 현재 시간\n}; //인증 관련 상태를 관리\n\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  // 다른 컴포넌트를 감싸는 래퍼로 활용하면 다른 컴포넌트가 AuthContext의 컨텍스트에 접근할 수 있다.\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; // 토큰이 빈문자열이면 false, 빈문자열 아니면 true\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n  };\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","loginHandler","setItem","logoutHandler","removeItem","contextValue","children"],"sources":["/Users/seonmin/Documents/react with max/section22/src/store/auth-context.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  //남은 시간을 밀리초로 리턴하기\n  const currentTime = new Date().getTime(); // 현재 시간\n};\n\n//인증 관련 상태를 관리\nexport const AuthContextProvider = (props) => {\n  // 다른 컴포넌트를 감싸는 래퍼로 활용하면 다른 컴포넌트가 AuthContext의 컨텍스트에 접근할 수 있다.\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token; // 토큰이 빈문자열이면 false, 빈문자열 아니면 true\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n  };\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;EACtCC,KAAK,EAAE,EAD+B;EAEtCC,UAAU,EAAE,KAF0B;EAGtCC,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;EAItCG,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;EACjD;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB,CAFiD,CAEP;AAC3C,CAHD,C,CAKA;;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C;EACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;EACA,MAAM,CAACb,KAAD,EAAQc,QAAR,IAAoBjB,QAAQ,CAACc,YAAD,CAAlC;EAEA,MAAMI,cAAc,GAAG,CAAC,CAACf,KAAzB,CAL4C,CAKZ;;EAEhC,MAAMgB,YAAY,GAAG,CAAChB,KAAD,EAAQK,cAAR,KAA2B;IAC9CS,QAAQ,CAACd,KAAD,CAAR;IACAY,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BjB,KAA9B;EACD,CAHD;;EAIA,MAAMkB,aAAa,GAAG,MAAM;IAC1BJ,QAAQ,CAAC,IAAD,CAAR;IACAF,YAAY,CAACO,UAAb,CAAwB,OAAxB;EACD,CAHD;;EAKA,MAAMC,YAAY,GAAG;IACnBpB,KAAK,EAAEA,KADY;IAEnBC,UAAU,EAAEc,cAFO;IAGnBb,KAAK,EAAEc,YAHY;IAInBb,MAAM,EAAEe;EAJW,CAArB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEE,YAA7B;IAAA,UACGV,KAAK,CAACW;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA5BM;;GAAMZ,mB;;KAAAA,mB;AA8Bb,eAAeX,WAAf"},"metadata":{},"sourceType":"module"}