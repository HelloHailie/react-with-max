{"ast":null,"code":"var _jsxFileName = \"/Users/seonmin/Documents/react with max/section22/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  //남은 시간을 밀리초로 리턴하기\n  const currentTime = new Date().getTime(); // 현재 시간\n\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n}; //인증 관련 상태를 관리\n\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  // 다른 컴포넌트를 감싸는 래퍼로 활용하면 다른 컴포넌트가 AuthContext의 컨텍스트에 접근할 수 있다.\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; // 토큰이 빈문자열이면 false, 빈문자열 아니면 true\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","removeItem","clearTimeout","loginHandler","setItem","remainingTime","setTimeout","contextValue","children"],"sources":["/Users/seonmin/Documents/react with max/section22/src/store/auth-context.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  //남은 시간을 밀리초로 리턴하기\n  const currentTime = new Date().getTime(); // 현재 시간\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\n//인증 관련 상태를 관리\nexport const AuthContextProvider = (props) => {\n  // 다른 컴포넌트를 감싸는 래퍼로 활용하면 다른 컴포넌트가 AuthContext의 컨텍스트에 접근할 수 있다.\n  const initialToken = localStorage.getItem(\"token\");\n  const [token, setToken] = useState(initialToken);\n\n  const userIsLoggedIn = !!token; // 토큰이 빈문자열이면 false, 빈문자열 아니면 true\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACtCC,KAAK,EAAE,EAD+B;EAEtCC,UAAU,EAAE,KAF0B;EAGtCC,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;EAItCG,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;EACjD;EACA,MAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB,CAFiD,CAEP;;EAC1C,MAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;EAEA,MAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;EACA,OAAOI,iBAAP;AACD,CAPD,C,CASA;;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C;EACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;EACA,MAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoBpB,QAAQ,CAACiB,YAAD,CAAlC;EAEA,MAAMI,cAAc,GAAG,CAAC,CAACjB,KAAzB,CAL4C,CAKZ;;EAEhC,MAAMkB,aAAa,GAAG,MAAM;IAC1BF,QAAQ,CAAC,IAAD,CAAR;IACAF,YAAY,CAACK,UAAb,CAAwB,OAAxB;;IAEA,IAAItB,WAAJ,EAAiB;MACfuB,YAAY,CAACvB,WAAD,CAAZ;IACD;EACF,CAPD;;EASA,MAAMwB,YAAY,GAAG,CAACrB,KAAD,EAAQK,cAAR,KAA2B;IAC9CW,QAAQ,CAAChB,KAAD,CAAR;IACAc,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BtB,KAA9B;IAEA,MAAMuB,aAAa,GAAGnB,sBAAsB,CAACC,cAAD,CAA5C;IAEAR,WAAW,GAAG2B,UAAU,CAACN,aAAD,EAAgBK,aAAhB,CAAxB;EACD,CAPD;;EASA,MAAME,YAAY,GAAG;IACnBzB,KAAK,EAAEA,KADY;IAEnBC,UAAU,EAAEgB,cAFO;IAGnBf,KAAK,EAAEmB,YAHY;IAInBlB,MAAM,EAAEe;EAJW,CAArB;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEO,YAA7B;IAAA,UACGb,KAAK,CAACc;EADT;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CArCM;;GAAMf,mB;;KAAAA,mB;AAuCb,eAAeb,WAAf"},"metadata":{},"sourceType":"module"}